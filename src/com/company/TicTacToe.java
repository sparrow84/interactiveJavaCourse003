package com.company;

import java.util.Random;
import java.util.Scanner;

public class TicTacToe {

    private static char[][] map;        // game matrix
    private static int SIZE = 3;        // fild size
    private static int WINNER_SEQUENCE = SIZE;        // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –•/–û –ø–æ–¥—Ä—è–¥ –¥–ª—è –ø–æ–±–µ–¥—ã
    private static int X,Y;
    private static boolean MAP_IS_EMPTY = true;
    private static int MOVE_NUMBER = 0;

    private static final char DOT_EMPTY = '‚Ä¢';      // empty field  ‚Ä¢    ‚Éû  ‚ñ°   'üûé' üûê  üûè ‚ñ° ‚ñ¢ ‚ñ£ ‚ñ§ ‚ñ• ‚ñ¶ ‚ñß ‚ñ® ‚ñ©
    private static final char DOT_X = '‚õå';          // chross   ‚õå   êçá
    private static final char DOT_O = '‡©¶';          // zero     ‡©¶  ‚óØ


    private static final boolean SILLY_MODE = true;

    private static Scanner scanner = new Scanner(System.in);
    private static Random random = new Random();

    public static void main(String[] args) {

        initMap();
        printMap();

        while(true) {
            MOVE_NUMBER++;
            humanTurn();
            if(isEndGame(DOT_X)) {
                break;
            }
//            MOVE_NUMBER++;
//            computerTurn();
//            if(isEndGame(DOT_O)) {
//                break;
//            }
        }

        System.out.println("Game over.");
    }

    // Prepare game field
    private static void initMap() {
        map = new char[SIZE][SIZE];
        for(int i = 0 ; i < SIZE; i++) {
            for(int j = 0; j < SIZE; j++) {
                map[i][j] = DOT_EMPTY;
            }
        }
    }

    private static void printMap() {
        for (int i = 0; i <= SIZE; i++) {
            if (i == 0 ) System.out.print("‚ñë ");
            else System.out.print(i + " ");
        }
        System.out.println();

        for (int i = 0; i < SIZE; i++) {
//            System.out.print((char)(i+65) + " ");
            System.out.print((i+1) + " ");
            for (int j = 0; j < SIZE; j++) {
                System.out.print(map[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    private static void humanTurn() {
//        int x,y;

        do {
            System.out.print("Enter the coordinates \nseparated by a space -> ");
            Y = scanner.nextInt() - 1;
            X = scanner.nextInt() - 1;
        } while(!isCellValid(X,Y));

        map[Y][X] = DOT_X;
    }

    private static void computerTurn() {
//        int x = -1, y = -1;
        X = -1;
        Y = -1;

        if (SILLY_MODE) {
            do {
                X = random.nextInt(SIZE);
                Y = random.nextInt(SIZE);
            } while (!isCellValid(X, Y));
        } else {
            if (MOVE_NUMBER == 1) {
                do {
                    X = random.nextInt(SIZE);
                    Y = random.nextInt(SIZE);
                } while (!isCellValid(X, Y));
            } else {

            }



// ************************************************************************************************


        }

        System.out.println("Computer move -> " + (Y + 1) + " " + (X + 1) + "  [" + map[Y][X] + "]");
        map[Y][X] = DOT_O;
    }

    /*
    –ü–æ–º–µ–Ω—è–ª –Ω–µ –º–Ω–æ–≥–æ –ª–æ–≥–∏–∫—É. –ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ø–æ–ª–µ –∏ —è—á–µ–π–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞ —Ç–æ true.
     */
    private static boolean isCellValid(int x, int y) {
        boolean result = false;
        if (x > 0 || x < SIZE || y > 0 || y < SIZE) {
            if (map[y][x] == DOT_EMPTY) {
                result = true;
            }
            System.out.println("isCellValid  [" + y + "][" + x + "]-> " + map[y][x]);
        }

        return result;
    }

    private static boolean isEndGame(char plauerSumbol) {

        boolean resalt = false;

        printMap();



        if (checkWin(map,plauerSumbol,X,Y)) {
            System.out.println("Win " + plauerSumbol);
            resalt = true;
        }

        if (isMapFull()) {
            System.out.println("Win frendship");
            resalt = true;
        }

        return resalt;
    }

    /** –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–±–µ–¥—É –Ω–∞ –ø–æ–ª–µ –ª—é–±–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Å –ª—é–±–æ–π –¥–ª–∏–Ω–Ω–æ–π –ø–æ–±–µ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
     * –ó–∞ –æ—Å–Ω–æ–≤—É –±–µ—Ä—É—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥ —ç—Ç–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param arr - –ø–æ–ª–µ
     * @param dotUser - —Å–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∞
     * @param a - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ x
     * @param b - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ y
     * @return true - –ø–æ–±–µ–¥–∞, false - –Ω–µ—Ç –ø–æ–±–µ–¥—ã
     */
    private static boolean checkWin(char[][] arr, char dotUser, int a, int b) {

        boolean result = false;

        do {
// Check left diagonal
            int winCount = 0;
            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (a - i > -1 && b - i > -1) {
                    if (arr[a - i][b - i] == dotUser) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (a + i < SIZE && b + i < SIZE) {
                    if (arr[a + i][b + i] == dotUser) { // ERROR
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

//Check right diagonal (switch a & b)
            winCount = 0;
            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (b - i > -1 && a + i < SIZE) {
                    if (arr[b - i][a + i] == dotUser) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (b + i < SIZE && a - i > -1) {
                    if (arr[b + i][a - i] == dotUser) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

// Check horizontal line
            winCount = 0;
            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (b - i > -1) {
                    if (arr[a][b - i] == dotUser) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (b + i < SIZE) {
                    if (arr[a][b + i] == dotUser) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

// Check vertical line
            winCount = 0;
            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (a - i > -1) {
                    if (arr[a - i][b] == dotUser) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (a + i < SIZE) {
                    if (arr[a + i][b] == dotUser) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

        } while (false);

        return result;
    }


    private static boolean isMapFull() {
        boolean result = true;

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (map[i][j] == DOT_EMPTY)
                    result = false;
            }
        }
        return result;
    }


    private static boolean checkRisk(char[][] arr, char dotRival, int a, int b) {

        boolean result = false;


        do {
// Check left diagonal
            int winCount = 0;
            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (a - i > -1 && b - i > -1) {
                    if (arr[a - i][b - i] == dotRival) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (a + i < SIZE && b + i < SIZE) {
                    if (arr[a + i][b + i] == dotRival) { // ERROR
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

//Check right diagonal (switch a & b)
            winCount = 0;
            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (b - i > -1 && a + i < SIZE) {
                    if (arr[b - i][a + i] == dotRival) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (b + i < SIZE && a - i > -1) {
                    if (arr[b + i][a - i] == dotRival) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

// Check horizontal line
            winCount = 0;
            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (b - i > -1) {
                    if (arr[a][b - i] == dotRival) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (b + i < SIZE) {
                    if (arr[a][b + i] == dotRival) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

// Check vertical line
            winCount = 0;
            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (a - i > -1) {
                    if (arr[a - i][b] == dotRival) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

            for (int i = 1; i < WINNER_SEQUENCE; i++) {
                if (a + i < SIZE) {
                    if (arr[a + i][b] == dotRival) {
                        winCount++;
                    } else break;
                } else break;
            }

            if (winCount == WINNER_SEQUENCE - 1) {
                result = true;
                break;
            }

        } while (false);

        return result;
    }

}
